["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$naga.storage.store-util","~:imports",null,"~:requires",["^ ","~$s","~$schema.core","^9","^9","~$st","~$naga.schema.store-structs","^;","^;","~$store","~$naga.store","^=","^=","~$cljs.core","^>"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$EPVPattern","^;","~$Symbol","^>","~$Axiom","^;","~$Results","^;","~$Value","^;"],"~:defs",["^ ","~$project-row",["^ ","~:schema",["~#list",["~$schema.core/->FnSchema","~$output-schema32894",["~$input-schema32895"]]],"~:protocol-inline",null,"~:meta",["^ ","~:arglists",["^I",["~$quote",["^I",[["~$storage","~$wide-pattern","~$nodes","~$mapping","~$row"]]]]],"~:file","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","~:line",10,"~:column",9,"~:end-line",10,"~:end-column",20,"^H",["^I",["^J","^K",["^L"]]],"~:doc","Inputs: [storage wide-pattern :- [s/Any] nodes :- (s/maybe [s/Num]) mapping :- #:s{Num s/Num} row :- [Value]]\n  Returns: [s/Any]\n\n  Creates a new EPVPattern from an existing one, based on existing bindings.\n   Uses the mapping to copy from columns in 'row' to overwrite variables in 'pattern'.\n   'pattern' must be a vector.\n   The index mappings have already been found and are in the 'mapping' argument","~:raw-arglists",["^I",["^P",["^I",[["^Q","^R","~:-",["~$s/Any"],"^S","~:-",["^I",["~$s/maybe",["~$s/Num"]]],"^T","~:-",["^ ","^13","^13"],"^U","~:-",["^E"]]]]]]],"^5","~$naga.storage.store-util/project-row","~:variadic",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",20,"~:method-params",["^I",[["~$G__32898","~$G__32899","~$G__32900","~$G__32901","~$G__32902"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^Q","^R","~:-",["^11"],"^S","~:-",["^I",["^12",["^13"]]],"^T","~:-",["^ ","^13","^13"],"^U","~:-",["^E"]]]]]],"^W",10,"^Y",10,"~:max-fixed-arity",5,"~:fn-var",true,"^O",["^I",["^P",["^I",[["^Q","^R","^S","^T","^U"]]]]],"^[","Inputs: [storage wide-pattern :- [s/Any] nodes :- (s/maybe [s/Num]) mapping :- #:s{Num s/Num} row :- [Value]]\n  Returns: [s/Any]\n\n  Creates a new EPVPattern from an existing one, based on existing bindings.\n   Uses the mapping to copy from columns in 'row' to overwrite variables in 'pattern'.\n   'pattern' must be a vector.\n   The index mappings have already been found and are in the 'mapping' argument"],"~$matching-vars",["^ ","^H",["^I",["^J","~$output-schema32918",["~$input-schema32919"]]],"^M",null,"^N",["^ ","^O",["^I",["^P",["^I",[["~$from","~$to"]]]]],"^V","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","^W",31,"^X",9,"^Y",31,"^Z",22,"^H",["^I",["^J","^1A",["^1B"]]],"^[","Inputs: [from :- [s/Any] to :- [Symbol]]\n  Returns: #:s{Num s/Num}\n\n  Returns pairs of indexes into seqs where the vars match.\n   For any variable that appears in both sequences, the column number in the\n   'from' parameter gets mapped to the column number of the same variable\n   in the 'to' parameter.","^10",["^I",["^P",["^I",[["^1C","~:-",["^11"],"^1D","~:-",["^B"]]]]]]],"^5","~$naga.storage.store-util/matching-vars","^15",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",22,"^16",["^I",[["~$G__32922","~$G__32923"]]],"^1<",null,"^1=",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^1C","~:-",["^11"],"^1D","~:-",["^B"]]]]]],"^W",31,"^Y",31,"^1>",2,"^1?",true,"^O",["^I",["^P",["^I",[["^1C","^1D"]]]]],"^[","Inputs: [from :- [s/Any] to :- [Symbol]]\n  Returns: #:s{Num s/Num}\n\n  Returns pairs of indexes into seqs where the vars match.\n   For any variable that appears in both sequences, the column number in the\n   'from' parameter gets mapped to the column number of the same variable\n   in the 'to' parameter."],"~$offset-mappings",["^ ","^H",["^I",["^J","~$output-schema32936",["~$input-schema32937"]]],"^M",null,"^N",["^ ","^O",["^I",["^P",["^I",[["^Q","~$full-pattern","~$data-vars","~$data"]]]]],"^V","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","^W",50,"^X",9,"^Y",50,"^Z",24,"^H",["^I",["^J","^1I",["^1J"]]],"^[","Inputs: [storage full-pattern :- [s/Any] data-vars :- [Symbol] data :- Results]\n  Returns: #:s{Num s/Num}\n\n  Build a pattern->data mapping that returns offsets into a pattern mapped to corresponding\n   offsets into data. If a data offset is negative, then this indicates a node must be built\n   instead of reading from the data.","^10",["^I",["^P",["^I",[["^Q","^1K","~:-",["^11"],"^1L","~:-",["^B"],"^1M","~:-","^D"]]]]]],"^5","~$naga.storage.store-util/offset-mappings","^15",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",24,"^16",["^I",[["~$G__32940","~$G__32941","~$G__32942","~$G__32943"]]],"^1<",null,"^1=",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^Q","^1K","~:-",["^11"],"^1L","~:-",["^B"],"^1M","~:-","^D"]]]]],"^W",50,"^Y",50,"^1>",4,"^1?",true,"^O",["^I",["^P",["^I",[["^Q","^1K","^1L","^1M"]]]]],"^[","Inputs: [storage full-pattern :- [s/Any] data-vars :- [Symbol] data :- Results]\n  Returns: #:s{Num s/Num}\n\n  Build a pattern->data mapping that returns offsets into a pattern mapped to corresponding\n   offsets into data. If a data offset is negative, then this indicates a node must be built\n   instead of reading from the data."],"~$new-nodes",["^ ","^H",["^I",["^J","~$output-schema32955",["~$input-schema32956"]]],"^M",null,"^N",["^ ","^O",["^I",["^P",["^I",[["~$offset-map"]]]]],"^V","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","^W",71,"^X",9,"^Y",71,"^Z",18,"^H",["^I",["^J","^1T",["^1U"]]],"^[","Inputs: [offset-map :- #:s{Num s/Num}]\n  Returns: [s/Num]\n\n  Returns all the new node references that appears in a map of offsets.\n   Node references are negative numbers.","^10",["^I",["^P",["^I",[["^1V","~:-",["^ ","^13","^13"]]]]]]],"^5","~$naga.storage.store-util/new-nodes","^15",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",18,"^16",["^I",[["~$G__32959"]]],"^1<",null,"^1=",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^1V","~:-",["^ ","^13","^13"]]]]]],"^W",71,"^Y",71,"^1>",1,"^1?",true,"^O",["^I",["^P",["^I",[["^1V"]]]]],"^[","Inputs: [offset-map :- #:s{Num s/Num}]\n  Returns: [s/Num]\n\n  Returns all the new node references that appears in a map of offsets.\n   Node references are negative numbers."],"~$group-exists?",["^ ","^H",["^I",["^J","~$output-schema32971",["~$input-schema32972"]]],"^M",null,"^N",["^ ","^O",["^I",["^P",["^I",[["^Q","~$group"]]]]],"^V","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","^W",77,"^X",9,"^Y",77,"^Z",22,"^H",["^I",["^J","^1Z",["^1["]]],"^[","Inputs: [storage group :- [Axiom]]\n  Returns: [s/Any]\n\n  Determines if a group is instantiating a new piece of data,\n   and if so checks if it already exists.","^10",["^I",["^P",["^I",[["^Q","^20","~:-",["^C"]]]]]]],"^5","~$naga.storage.store-util/group-exists?","^15",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",22,"^16",["^I",[["~$G__32975","~$G__32976"]]],"^1<",null,"^1=",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^Q","^20","~:-",["^C"]]]]]],"^W",77,"^Y",77,"^1>",2,"^1?",true,"^O",["^I",["^P",["^I",[["^Q","^20"]]]]],"^[","Inputs: [storage group :- [Axiom]]\n  Returns: [s/Any]\n\n  Determines if a group is instantiating a new piece of data,\n   and if so checks if it already exists."],"~$adorn-entities",["^ ","^H",["^I",["^J","~$output-schema32995",["~$input-schema32996"]]],"^M",null,"^N",["^ ","^O",["^I",["^P",["^I",[["~$triples"]]]]],"^V","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","^W",85,"^X",9,"^Y",85,"^Z",23,"^H",["^I",["^J","^25",["^26"]]],"^[","Inputs: [triples :- [Axiom]]\n  Returns: [Axiom]\n\n  Marks new entities as Naga entities","^10",["^I",["^P",["^I",[["^27","~:-",["^C"]]]]]]],"^5","~$naga.storage.store-util/adorn-entities","^15",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",23,"^16",["^I",[["~$G__32999"]]],"^1<",null,"^1=",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^27","~:-",["^C"]]]]]],"^W",85,"^Y",85,"^1>",1,"^1?",true,"^O",["^I",["^P",["^I",[["^27"]]]]],"^[","Inputs: [triples :- [Axiom]]\n  Returns: [Axiom]\n\n  Marks new entities as Naga entities"],"~$project",["^ ","^H",["^I",["^J","~$output-schema33016",["~$input-schema33017"]]],"^M",null,"^N",["^ ","^O",["^I",["^P",["^I",[["^Q","~$pattern","^1M"]]]]],"^V","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","^W",94,"^X",9,"^Y",94,"^Z",16,"^H",["^I",["^J","^2;",["^2<"]]],"^[","Inputs: [storage pattern :- [s/Any] data :- Results]\n  Returns: Results\n\n  Converts each row from a result, into just the requested columns, as per the patterns arg.\n   Any specified value in the patterns will be copied into that position in the projection.\n   Unbound patterns will generate new nodes for each row.\n  e.g. For pattern [?h1 :friend ?h2]\n       data: [[h1=frodo h3=bilbo h2=gandalf]\n              [h1=merry h3=pippin h2=frodo]]\n  leads to: [[h1=frodo :friend h2=gandalf]\n             [h1=merry :friend h2=frodo]]","^10",["^I",["^P",["^I",[["^Q","^2=","~:-",["^11"],"^1M","~:-","^D"]]]]]],"^5","~$naga.storage.store-util/project","^15",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",16,"^16",["^I",[["~$G__33020","~$G__33021","~$G__33022"]]],"^1<",null,"^1=",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^Q","^2=","~:-",["^11"],"^1M","~:-","^D"]]]]],"^W",94,"^Y",94,"^1>",3,"^1?",true,"^O",["^I",["^P",["^I",[["^Q","^2=","^1M"]]]]],"^[","Inputs: [storage pattern :- [s/Any] data :- Results]\n  Returns: Results\n\n  Converts each row from a result, into just the requested columns, as per the patterns arg.\n   Any specified value in the patterns will be copied into that position in the projection.\n   Unbound patterns will generate new nodes for each row.\n  e.g. For pattern [?h1 :friend ?h2]\n       data: [[h1=frodo h3=bilbo h2=gandalf]\n              [h1=merry h3=pippin h2=frodo]]\n  leads to: [[h1=frodo :friend h2=gandalf]\n             [h1=merry :friend h2=frodo]]"],"~$insert-project",["^ ","^H",["^I",["^J","~$output-schema33035",["~$input-schema33036"]]],"^M",null,"^N",["^ ","^O",["^I",["^P",["^I",[["^Q","~$patterns","~$columns","^1M"]]]]],"^V","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/storage/store_util.cljc","^W",112,"^X",9,"^Y",112,"^Z",23,"^H",["^I",["^J","^2C",["^2D"]]],"^[","Inputs: [storage patterns :- [[s/Any]] columns :- [Symbol] data :- Results]\n  Returns: Results\n\n  Similar to project, only the generated data will be in triples for insertion.\n   If triples describe entities with existing dc/ident fields, then they will be dropped.","^10",["^I",["^P",["^I",[["^Q","^2E","~:-",[["^11"]],"^2F","~:-",["^B"],"^1M","~:-","^D"]]]]]],"^5","~$naga.storage.store-util/insert-project","^15",false,"^V","resources/public/cljs/out/naga/storage/store_util.cljc","^Z",23,"^16",["^I",[["~$G__33039","~$G__33040","~$G__33041","~$G__33042"]]],"^1<",null,"^1=",["^I",[null,null]],"^X",1,"^10",["^I",["^P",["^I",[["^Q","^2E","~:-",[["^11"]],"^2F","~:-",["^B"],"^1M","~:-","^D"]]]]],"^W",112,"^Y",112,"^1>",4,"^1?",true,"^O",["^I",["^P",["^I",[["^Q","^2E","^2F","^1M"]]]]],"^[","Inputs: [storage patterns :- [[s/Any]] columns :- [Symbol] data :- Results]\n  Returns: Results\n\n  Similar to project, only the generated data will be in triples for insertion.\n   If triples describe entities with existing dc/ident fields, then they will be dropped."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$s","^9","^9","^9"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^G","~$schema.core/Any","^H","~:schema.core/error","^B","^C","^1D","^1M","^1Y","^U","^24","^2=","^D","~:value","~:naga/entity","^20","~:type","~:output","^2E","^2F","^T","^1V","~:cols","^27","^1L","^1H","~:db/ident","^R","~:error","^12","^1S","~:input","^2:","^S","^1C","^1K","^[","^2B","^1@","~$?e","^E","^Q","^11","^13"]],"~:order",["^Q","^H","^2P","^R","^11","^S","^12","^13","^T","^U","^E","^2Y","^G","^[","^2T","^2R","^2X","^2Q","^2W","^2U","^1C","^1D","^B","^1@","^1K","^1L","^1M","^D","^1H","^1V","^1S","^20","^C","^1Y","^2Z","^27","^24","^2S","^2=","^2:","^2V","^2E","^2F","^2B"]],"^[","Some common utilities for storage functions"]