["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$JSON",["^ ","~$parse",["^ "],"~$stringify",["^ "]],"~$Error",["^ "]],"~:use-macros",["^ ","~$=>","~$schema.core"],"~:excludes",["~#set",[]],"~:name","~$naga.data","~:imports",null,"~:requires",["^ ","~$s","^9","^9","^9","~$str","~$clojure.string","^A","^A","~$store","~$naga.store","^C","^C"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$StorageType","^C"],"~:defs",["^ ","~$name-for",["^ ","~:schema",["~#list",["~$schema.core/->FnSchema","~$output-schema37076",["~$input-schema37077"]]],"~:protocol-inline",null,"~:meta",["^ ","~:arglists",["^J",["~$quote",["^J",[["~$id"]]]]],"~:file","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","~:line",119,"~:column",9,"~:end-line",119,"~:end-column",17,"^I",["^J",["^K","^L",["^M"]]],"~:doc","Inputs: [id :- s/Any]\n\n  Convert an id (probably a number) to a keyword for identification","~:raw-arglists",["^J",["^Q",["^J",[["^R","~:-","~$s/Any"]]]]]],"^<","~$naga.data/name-for","~:variadic",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",17,"~:method-params",["^J",[["~$G__37080"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^R","~:-","^Z"]]]]],"^T",119,"^V",119,"~:max-fixed-arity",1,"~:fn-var",true,"^P",["^J",["^Q",["^J",[["^R"]]]]],"^X","Inputs: [id :- s/Any]\n\n  Convert an id (probably a number) to a keyword for identification"],"~$containership-triples",["^ ","^I",["^J",["^K","~$output-schema36951",["~$input-schema36952"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["~$node","~$triples"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",41,"^U",9,"^V",41,"^W",30,"^I",["^J",["^K","^18",["^19"]]],"^X","Inputs: [node :- s/Any triples :- [Triple]]\n\n  Finds the list of entity nodes referred to in a list and builds\n   triples describing a flat 'contains' property","^Y",["^J",["^Q",["^J",[["^1:","~:-","^Z","^1;","~:-",["~$Triple"]]]]]]],"^<","~$naga.data/containership-triples","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",30,"^11",["^J",[["~$G__36955","~$G__36956"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^1:","~:-","^Z","^1;","~:-",["^1<"]]]]]],"^T",41,"^V",41,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^1:","^1;"]]]]],"^X","Inputs: [node :- s/Any triples :- [Triple]]\n\n  Finds the list of entity nodes referred to in a list and builds\n   triples describing a flat 'contains' property"],"~$*current-storage*",["^ ","^<","~$naga.data/*current-storage*","^S","resources/public/cljs/out/naga/data.cljc","^T",28,"^U",1,"^V",28,"^W",33,"~:dynamic",true,"^O",["^ ","^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",28,"^U",16,"^V",28,"^W",33,"^1B",true],"~:tag","~$clj-nil"],"~$check-structure",["^ ","^I",["^J",["^K","~$output-schema37180",["~$input-schema37181"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B","~$prop","~$v"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",173,"^U",9,"^V",173,"^W",24,"^I",["^J",["^K","^1F",["^1G"]]],"^X","Inputs: [store :- StorageType prop :- s/Any v :- s/Any]\n  Returns: (s/maybe [[s/Keyword s/Any]])\n\n  Determines if a value represents a structure. If so, return the property/values for it.\n   Otherwise, return nil.","^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^1H","~:-","^Z","~$v","~:-","^Z"]]]]]],"^<","~$naga.data/check-structure","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",24,"^11",["^J",[["~$G__37184","~$G__37185","~$G__37186"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^1H","~:-","^Z","~$v","~:-","^Z"]]]]],"^T",173,"^V",173,"^15",3,"^16",true,"^P",["^J",["^Q",["^J",[["^B","^1H","~$v"]]]]],"^X","Inputs: [store :- StorageType prop :- s/Any v :- s/Any]\n  Returns: (s/maybe [[s/Keyword s/Any]])\n\n  Determines if a value represents a structure. If so, return the property/values for it.\n   Otherwise, return nil."],"~$property-values",["^ ","^I",["^J",["^K","~$output-schema37163",["~$input-schema37164"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B","~$entity"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",166,"^U",9,"^V",166,"^W",24,"^I",["^J",["^K","^1N",["^1O"]]],"^X","Inputs: [store :- StorageType entity :- s/Any]\n  Returns: [[s/Keyword s/Any]]\n\n  Return all the property/value pairs for a given entity in the store.","^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^1P","~:-","^Z"]]]]]],"^<","~$naga.data/property-values","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",24,"^11",["^J",[["~$G__37167","~$G__37168"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^1P","~:-","^Z"]]]]],"^T",166,"^V",166,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^B","^1P"]]]]],"^X","Inputs: [store :- StorageType entity :- s/Any]\n  Returns: [[s/Keyword s/Any]]\n\n  Return all the property/value pairs for a given entity in the store."],"^1<",["^ ","^<","~$naga.data/Triple","^S","resources/public/cljs/out/naga/data.cljc","^T",30,"^U",1,"^V",30,"^W",12,"^O",["^ ","^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",30,"^U",6,"^V",30,"^W",12],"^1C","~$cljs.core/IVector"],"~$build-list",["^ ","^I",["^J",["^K","~$output-schema37198",["~$input-schema37199"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B","~$pairs"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",186,"^U",9,"^V",186,"^W",19,"^I",["^J",["^K","^1W",["^1X"]]],"^X","Inputs: [store :- StorageType pairs :- [[s/Keyword s/Any]]]\n  Returns: [s/Any]\n\n  Takes property/value pairs and if they represent a list node, returns the list.\n   else, nil.","^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^1Y","~:-",[["~$s/Keyword","^Z"]]]]]]]],"^<","~$naga.data/build-list","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",19,"^11",["^J",[["~$G__37202","~$G__37203"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^1Y","~:-",[["^1Z","^Z"]]]]]]],"^T",186,"^V",186,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^B","^1Y"]]]]],"^X","Inputs: [store :- StorageType pairs :- [[s/Keyword s/Any]]]\n  Returns: [s/Any]\n\n  Takes property/value pairs and if they represent a list node, returns the list.\n   else, nil."],"~$pairs->json",["^ ","^I",["^J",["^K","~$output-schema37245",["~$input-schema37246"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B","~$prop-vals"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",214,"^U",9,"^V",214,"^W",20,"^I",["^J",["^K","^23",["^24"]]],"^X","Inputs: [store :- StorageType prop-vals :- [[s/Keyword s/Any]]]\n  Returns: #:s{Keyword s/Any}\n\n  Uses a set of property-value pairs to load up a nested data structure from the graph","^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^25","~:-",[["^1Z","^Z"]]]]]]]],"^<","~$naga.data/pairs->json","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",20,"^11",["^J",[["~$G__37249","~$G__37250"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^25","~:-",[["^1Z","^Z"]]]]]]],"^T",214,"^V",214,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^B","^25"]]]]],"^X","Inputs: [store :- StorageType prop-vals :- [[s/Keyword s/Any]]]\n  Returns: #:s{Keyword s/Any}\n\n  Uses a set of property-value pairs to load up a nested data structure from the graph"],"~$json-generate-string",["^ ","^N",null,"^O",["^ ","^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",24,"^U",10,"^V",24,"^W",30,"^P",["^J",["^Q",["^J",[["~$data"],["^2:","~$indent"]]]]],"~:top-fn",["^ ","^10",false,"^15",2,"^11",["^J",[["^2:"],["^2:","^2;"]]],"^P",["^J",[["^2:"],["^2:","^2;"]]],"^14",["^J",[null,null]]]],"^<","~$naga.data/json-generate-string","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",30,"^2<",["^ ","^10",false,"^15",2,"^11",["^J",[["^2:"],["^2:","^2;"]]],"^P",["^J",[["^2:"],["^2:","^2;"]]],"^14",["^J",[null,null]]],"^11",["^J",[["^2:"],["^2:","^2;"]]],"^13",null,"^14",["^J",[null,null]],"^U",4,"^T",24,"^V",24,"^15",2,"^16",true,"^P",["^J",[["^2:"],["^2:","^2;"]]]],"~$delta->json",["^ ","^I",["^J",["^K","~$output-schema37344",["~$input-schema37345"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",258,"^U",9,"^V",258,"^W",20,"^I",["^J",["^K","^2?",["^2@"]]],"^X","Inputs: [store :- StorageType]\n  Returns: [#:s{Keyword s/Any}]\n\n  Pulls all top level JSON out of a store","^Y",["^J",["^Q",["^J",[["^B","~:-","^F"]]]]]],"^<","~$naga.data/delta->json","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",20,"^11",["^J",[["~$G__37348"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F"]]]]],"^T",258,"^V",258,"^15",1,"^16",true,"^P",["^J",["^Q",["^J",[["^B"]]]]],"^X","Inputs: [store :- StorageType]\n  Returns: [#:s{Keyword s/Any}]\n\n  Pulls all top level JSON out of a store"],"~$string->triples",["^ ","^I",["^J",["^K","~$output-schema37146",["~$input-schema37147"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["~$storage","~$s"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",156,"^U",9,"^V",156,"^W",24,"^I",["^J",["^K","^2D",["^2E"]]],"^X","Inputs: [storage :- StorageType s :- s/Str]\n  Returns: [Triple]\n\n  Converts a string to triples relevant to a store","^Y",["^J",["^Q",["^J",[["^2F","~:-","^F","~$s","~:-","~$s/Str"]]]]]],"^<","~$naga.data/string->triples","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",24,"^11",["^J",[["~$G__37150","~$G__37151"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^2F","~:-","^F","~$s","~:-","^2G"]]]]],"^T",156,"^V",156,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^2F","~$s"]]]]],"^X","Inputs: [storage :- StorageType s :- s/Str]\n  Returns: [Triple]\n\n  Converts a string to triples relevant to a store"],"~$stream->triples",["^ ","^I",["^J",["^K","~$output-schema37129",["~$input-schema37130"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^2F","~$io"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",152,"^U",13,"^V",152,"^W",28,"^I",["^J",["^K","^2L",["^2M"]]],"^X","Inputs: [storage io]\n  Returns: [Triple]","^Y",["^J",["^Q",["^J",[["^2F","^2N"]]]]]],"^<","~$naga.data/stream->triples","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",28,"^11",["^J",[["~$G__37133","~$G__37134"]]],"^13",null,"^14",["^J",[null,null]],"^U",5,"^Y",["^J",["^Q",["^J",[["^2F","^2N"]]]]],"^T",152,"^V",152,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^2F","^2N"]]]]],"^X","Inputs: [storage io]\n  Returns: [Triple]"],"~$value-triples-list",["^ ","^I",["^J",["^K","~$output-schema37011",["~$input-schema37012"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["~$vlist"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",81,"^U",9,"^V",81,"^W",27,"^I",["^J",["^K","^2S",["^2T"]]],"^X","Inputs: [vlist :- [s/Any]]\n  Returns: [(s/one s/Any \"node ID\") (s/one [Triple] \"current list of triples\")]","^Y",["^J",["^Q",["^J",[["^2U","~:-",["^Z"]]]]]]],"^<","~$naga.data/value-triples-list","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",27,"^11",["^J",[["~$G__37015"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^2U","~:-",["^Z"]]]]]],"^T",81,"^V",81,"^15",1,"^16",true,"^P",["^J",["^Q",["^J",[["^2U"]]]]],"^X","Inputs: [vlist :- [s/Any]]\n  Returns: [(s/one s/Any \"node ID\") (s/one [Triple] \"current list of triples\")]"],"~$json->triples",["^ ","^I",["^J",["^K","~$output-schema37111",["~$input-schema37112"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^2F","~$j"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",136,"^U",9,"^V",136,"^W",22,"^I",["^J",["^K","^2Y",["^2Z"]]],"^X","Inputs: [storage j]\n  Returns: [Triple]\n\n  Converts parsed JSON into a sequence of triples for a provided storage.","^Y",["^J",["^Q",["^J",[["^2F","~$j"]]]]]],"^<","~$naga.data/json->triples","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",22,"^11",["^J",[["~$G__37115","~$G__37116"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^2F","~$j"]]]]],"^T",136,"^V",136,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^2F","~$j"]]]]],"^X","Inputs: [storage j]\n  Returns: [Triple]\n\n  Converts parsed JSON into a sequence of triples for a provided storage."],"~$store->json",["^ ","^I",["^J",["^K","~$output-schema37296",["~$input-schema37297"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",244,"^U",9,"^V",244,"^W",20,"^I",["^J",["^K","^33",["^34"]]],"^X","Inputs: [store :- StorageType]\n  Returns: [#:s{Keyword s/Any}]\n\n  Pulls all top level JSON out of a store","^Y",["^J",["^Q",["^J",[["^B","~:-","^F"]]]]]],"^<","~$naga.data/store->json","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",20,"^11",["^J",[["~$G__37300"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F"]]]]],"^T",244,"^V",244,"^15",1,"^16",true,"^P",["^J",["^Q",["^J",[["^B"]]]]],"^X","Inputs: [store :- StorageType]\n  Returns: [#:s{Keyword s/Any}]\n\n  Pulls all top level JSON out of a store"],"~$delta->str",["^ ","^I",["^J",["~$schema.core/make-fn-schema","~$output-schema37360",["~$input-schema37361","~$input-schema37365"]]],"^N",null,"^O",["^ ","^I",["^J",["^38","^39",["^3:","^3;"]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^W",19,"^2<",["^ ","^10",false,"^15",2,"^11",["^J",[["~$G__37364"],["~$G__37368","~$G__37369"]]],"^P",["^J",[["^3<"],["^3=","^3>"]]],"^14",["^J",[null,null]]],"^U",9,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F"],["^B","~:-","^F","^2;","~:-","~$s/Num"]]]]],"^T",264,"^V",264,"^P",["^J",["^Q",["^J",[["^B"],["^B","^2;"]]]]],"^X","Inputs: ([store :- StorageType] [store :- StorageType indent :- s/Num])\n  Returns: s/Str\n\n  Reads a store into JSON strings"],"^<","~$naga.data/delta->str","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",19,"^2<",["^ ","^10",false,"^15",2,"^11",["^J",[["^3<"],["^3=","^3>"]]],"^P",["^J",[["^3<"],["^3=","^3>"]]],"^14",["^J",[null,null]]],"^11",["^J",[["^3<"],["^3=","^3>"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F"],["^B","~:-","^F","^2;","~:-","^3?"]]]]],"^T",264,"^V",264,"^15",2,"^16",true,"^P",["^J",[["^3<"],["^3=","^3>"]]],"^X","Inputs: ([store :- StorageType] [store :- StorageType indent :- s/Num])\n  Returns: s/Str\n\n  Reads a store into JSON strings"],"~$parse-json-string",["^ ","^N",null,"^O",["^ ","^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",12,"^U",15,"^V",12,"^W",32],"^<","~$naga.data/parse-json-string","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",32,"^11",["^J",[["~$p1__36942#"]]],"^13",null,"^14",["^J",[]],"^U",10,"^T",12,"^V",12,"^15",1,"^16",true,"^P",null],"~$get-naga-first",["^ ","^N",null,"^O",["^ ","^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",32,"^U",7,"^V",32,"^W",21,"^P",["^J",["^Q",["^J",[["~$struct"]]]]],"^X","Finds the naga/first property in a map, and gets the value."],"^<","~$naga.data/get-naga-first","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",21,"^11",["^J",[["^3E"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^T",32,"^V",32,"^15",1,"^16",true,"^P",["^J",["^Q",["^J",[["^3E"]]]]],"^X","Finds the naga/first property in a map, and gets the value."],"~$store->str",["^ ","^I",["^J",["^38","~$output-schema37312",["~$input-schema37313","~$input-schema37317"]]],"^N",null,"^O",["^ ","^I",["^J",["^38","^3H",["^3I","^3J"]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^W",19,"^2<",["^ ","^10",false,"^15",2,"^11",["^J",[["~$G__37316"],["~$G__37320","~$G__37321"]]],"^P",["^J",[["^3K"],["^3L","^3M"]]],"^14",["^J",[null,null]]],"^U",9,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F"],["^B","~:-","^F","^2;","~:-","^3?"]]]]],"^T",251,"^V",251,"^P",["^J",["^Q",["^J",[["^B"],["^B","^2;"]]]]],"^X","Inputs: ([store :- StorageType] [store :- StorageType indent :- s/Num])\n  Returns: s/Str\n\n  Reads a store into JSON strings"],"^<","~$naga.data/store->str","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",19,"^2<",["^ ","^10",false,"^15",2,"^11",["^J",[["^3K"],["^3L","^3M"]]],"^P",["^J",[["^3K"],["^3L","^3M"]]],"^14",["^J",[null,null]]],"^11",["^J",[["^3K"],["^3L","^3M"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F"],["^B","~:-","^F","^2;","~:-","^3?"]]]]],"^T",251,"^V",251,"^15",2,"^16",true,"^P",["^J",[["^3K"],["^3L","^3M"]]],"^X","Inputs: ([store :- StorageType] [store :- StorageType indent :- s/Num])\n  Returns: s/Str\n\n  Reads a store into JSON strings"],"~$value-triples",["^ ","^<","~$naga.data/value-triples","^S","resources/public/cljs/out/naga/data.cljc","^T",60,"^U",1,"^V",60,"^W",24,"^X","Converts a value into a list of triples.\n   Return the entity ID of the data coupled with the sequence of triples.\n   NOTE: This may need to be dispatched to storage.\n         e.g. Datomic could use properties to determine how to encode data.","^O",["^ ","^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",60,"^U",11,"^V",60,"^W",24,"^X","Converts a value into a list of triples.\n   Return the entity ID of the data coupled with the sequence of triples.\n   NOTE: This may need to be dispatched to storage.\n         e.g. Datomic could use properties to determine how to encode data."],"^1C","~$cljs.core/MultiFn"],"~$ident-map->triples",["^ ","^I",["^J",["^K","~$output-schema37092",["~$input-schema37093"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["~$j"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",127,"^U",9,"^V",127,"^W",27,"^I",["^J",["^K","^3S",["^3T"]]],"^X","Inputs: [j]\n  Returns: [s/Any [Triple]]\n\n  Converts a single map to triples for an ID'ed map","^Y",["^J",["^Q",["^J",[["~$j"]]]]]],"^<","~$naga.data/ident-map->triples","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",27,"^11",["^J",[["~$G__37096"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["~$j"]]]]],"^T",127,"^V",127,"^15",1,"^16",true,"^P",["^J",["^Q",["^J",[["~$j"]]]]],"^X","Inputs: [j]\n  Returns: [s/Any [Triple]]\n\n  Converts a single map to triples for an ID'ed map"],"~$map->triples",["^ ","^I",["^J",["^K","~$output-schema37060",["~$input-schema37061"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^2:"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",110,"^U",9,"^V",110,"^W",21,"^I",["^J",["^K","^3X",["^3Y"]]],"^X","Inputs: [data :- #:s{Keyword s/Any}]\n  Returns: [s/Any [Triple]]\n\n  Converts a single map to triples. Returns a pair of the map's ID and the triples for the map.","^Y",["^J",["^Q",["^J",[["^2:","~:-",["^ ","^1Z","^Z"]]]]]]],"^<","~$naga.data/map->triples","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",21,"^11",["^J",[["~$G__37064"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^2:","~:-",["^ ","^1Z","^Z"]]]]]],"^T",110,"^V",110,"^15",1,"^16",true,"^P",["^J",["^Q",["^J",[["^2:"]]]]],"^X","Inputs: [data :- #:s{Keyword s/Any}]\n  Returns: [s/Any [Triple]]\n\n  Converts a single map to triples. Returns a pair of the map's ID and the triples for the map."],"~$property-vals",["^ ","^I",["^J",["^K","~$output-schema37030",["~$input-schema37031"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["~$entity-id",["~$property","~$value"]]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",101,"^U",9,"^V",101,"^W",22,"^I",["^J",["^K","^41",["^42"]]],"^X","Inputs: [entity-id :- s/Any [property value] :- [s/Keyword s/Any]]\n  Returns: [Triple]\n\n  Takes a property-value pair associated with an entity,\n   and builds triples around it","^Y",["^J",["^Q",["^J",[["^43","~:-","^Z",["^44","^45"],"~:-",["^1Z","^Z"]]]]]]],"^<","~$naga.data/property-vals","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",22,"^11",["^J",[["~$G__37034","~$G__37035"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^43","~:-","^Z",["^44","^45"],"~:-",["^1Z","^Z"]]]]]],"^T",101,"^V",101,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^43",["^44","^45"]]]]]],"^X","Inputs: [entity-id :- s/Any [property value] :- [s/Keyword s/Any]]\n  Returns: [Triple]\n\n  Takes a property-value pair associated with an entity,\n   and builds triples around it"],"~$recurse-node",["^ ","^I",["^J",["^K","~$output-schema37218",["~$input-schema37219"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B",["^1H","~$v","~:as","~$prop-val"]]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",204,"^U",9,"^V",204,"^W",21,"^I",["^J",["^K","^4:",["^4;"]]],"^X","Inputs: [store :- StorageType [prop v :as prop-val] :- [s/Keyword s/Any]]\n  Returns: s/Any\n\n  Determines if the val of a map entry is a node to be recursed on, and loads if necessary","^Y",["^J",["^Q",["^J",[["^B","~:-","^F",["^1H","~$v","^4<","^4="],"~:-",["^1Z","^Z"]]]]]]],"^<","~$naga.data/recurse-node","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",21,"^11",["^J",[["~$G__37222","~$G__37223"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F",["^1H","~$v","^4<","^4="],"~:-",["^1Z","^Z"]]]]]],"^T",204,"^V",204,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^B",["^1H","~$v","^4<","^4="]]]]]],"^X","Inputs: [store :- StorageType [prop v :as prop-val] :- [s/Keyword s/Any]]\n  Returns: s/Any\n\n  Determines if the val of a map entry is a node to be recursed on, and loads if necessary"],"~$ident->json",["^ ","^I",["^J",["^K","~$output-schema37279",["~$input-schema37280"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B","~$ident"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",234,"^U",9,"^V",234,"^W",20,"^I",["^J",["^K","^4B",["^4C"]]],"^X","Inputs: [store :- StorageType ident :- s/Any]\n  Returns: #:s{Keyword s/Any}\n\n  Converts data in a database to data structures suitable for JSON encoding","^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^4D","~:-","^Z"]]]]]],"^<","~$naga.data/ident->json","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",20,"^11",["^J",[["~$G__37283","~$G__37284"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^4D","~:-","^Z"]]]]],"^T",234,"^V",234,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^B","^4D"]]]]],"^X","Inputs: [store :- StorageType ident :- s/Any]\n  Returns: #:s{Keyword s/Any}\n\n  Converts data in a database to data structures suitable for JSON encoding"],"~$list-triples",["^ ","^I",["^J",["^K","~$output-schema36979",["~$input-schema36980"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[[["~$v","~$&","~$vs","^4<","^2U"]]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",69,"^U",9,"^V",69,"^W",21,"^I",["^J",["^K","^4I",["^4J"]]],"^X","Inputs: [[v & vs :as vlist]]\n\n  Creates the triples for a list","^Y",["^J",["^Q",["^J",[[["~$v","~$&","^4K","^4<","^2U"]]]]]]],"^<","~$naga.data/list-triples","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",21,"^11",["^J",[["~$G__36983"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[[["~$v","~$&","^4K","^4<","^2U"]]]]]],"^T",69,"^V",69,"^15",1,"^16",true,"^P",["^J",["^Q",["^J",[[["~$v","~$&","^4K","^4<","^2U"]]]]]],"^X","Inputs: [[v & vs :as vlist]]\n\n  Creates the triples for a list"],"~$id->json",["^ ","^I",["^J",["^K","~$output-schema37262",["~$input-schema37263"]]],"^N",null,"^O",["^ ","^P",["^J",["^Q",["^J",[["^B","^43"]]]]],"^S","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/data.cljc","^T",227,"^U",9,"^V",227,"^W",17,"^I",["^J",["^K","^4O",["^4P"]]],"^X","Inputs: [store :- StorageType entity-id :- s/Any]\n  Returns: #:s{Keyword s/Any}\n\n  Uses an id node to load up a nested data structure from the graph","^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^43","~:-","^Z"]]]]]],"^<","~$naga.data/id->json","^10",false,"^S","resources/public/cljs/out/naga/data.cljc","^W",17,"^11",["^J",[["~$G__37266","~$G__37267"]]],"^13",null,"^14",["^J",[null,null]],"^U",1,"^Y",["^J",["^Q",["^J",[["^B","~:-","^F","^43","~:-","^Z"]]]]],"^T",227,"^V",227,"^15",2,"^16",true,"^P",["^J",["^Q",["^J",[["^B","^43"]]]]],"^X","Inputs: [store :- StorageType entity-id :- s/Any]\n  Returns: #:s{Keyword s/Any}\n\n  Uses an id node to load up a nested data structure from the graph"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$s","^9","^9","^9"],"~:cljs.analyzer/constants",["^ ","~:seen",["^;",["^1Z","^H","~$schema.core/Any","^I","^17","^2G","~:io","^25","^1P","~:schema.core/error","~$?o","~$arg1","^F","^2:","^1E","^1M","^1<","~:default","~:value","~:naga/entity","^1V","~$v","~$s/one","^2;","^2N","^22","~:naga/rest","~:type","^B","~:output","^2>","^2C","^2K","^2R","^2U","^2X","^1;","^32","^37","^43","~$s","^1:","~$?eid","~:db/id","^3G","~:db/ident","^3R","~:error","~$s/maybe","^3W","^40","~:input","^1Y","~$arg0","~$j","^R","^49","~:hierarchy","^1H","^X","~:keywordize-keys","^4A","~$?p","^4H","^4D","~$?e","^2F","^Z","^3?","~$?id","^4N"]],"~:order",["^5@","^1:","^I","^Z","^1;","^1<","^5=","^17","^X","^4X","^56","^52","^5;","^4Z","^55","^57","^5?","^51","^5>","^4H","^2U","^2R","^54","^43","^50","^40","^2:","^1Z","^3W","^59","^R","^H","~$j","^3R","^5:","^53","^2F","^2X","^2N","^2K","^4Y","^F","~$s","^2G","^2C","^B","^1P","^1M","^5A","^4[","^1H","~$v","^1E","^5<","^1Y","^1V","^49","^25","^22","^4N","^4D","^4A","^58","^32","^5B","^5C","^2;","^3?","^3G","^2>","^37"]],"^X","Converts external data into a graph format (triples)."]