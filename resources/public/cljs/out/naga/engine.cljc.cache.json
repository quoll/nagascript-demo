["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$naga.engine","~:imports",null,"~:requires",["^ ","~$schema.core","^;","~$u","~$naga.util","~$q","~$naga.queue","~$store","~$naga.store","^=","^=","~$store-registry","~$naga.store-registry","~$naga.schema.structs","^B","~$s","^;","~$naga.schema.store-structs","^C","^<","^<","^A","^A","~$st","^B","~$ss","^C","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$StorageType","^?","~$StatusMapEntry","^B","~$Rule","^B","~$StatusMap","^B","~$DynamicRule","^B","~$RulePatternPair","^B","~$Body","^B","~$PQueueType","^=","~$Program","^B"],"~:defs",["^ ","~$true*",["^ ","^7","~$naga.engine/true*","~:file","resources/public/cljs/out/naga/engine.cljc","~:line",20,"~:column",1,"~:end-line",20,"~:end-column",11,"~:meta",["^ ","^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",20,"^V",6,"^W",20,"^X",11],"~:tag","~$any"],"~$extract-dirty-pattern",["^ ","~:schema",["~#list",["~$schema.core/->FnSchema","~$output-schema36290",["~$input-schema36291"]]],"~:protocol-inline",null,"^Y",["^ ","~:arglists",["^12",["~$quote",["^12",[[["~$p","~$status-atom"]]]]]],"^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",23,"^V",9,"^W",23,"^X",30,"^11",["^12",["^13","^14",["^15"]]],"~:doc","Inputs: [[p status-atom] :- StatusMapEntry]\n  Returns: (s/maybe ss/EPVPattern)\n\n  Takes a key and value pair (from a status map) and determines if\n  the value (a ConstraintData) is marked dirty.  If it is dirty, then return\n  the key (an EPVPattern).","~:raw-arglists",["^12",["^18",["^12",[[["~$p","^19"],"~:-","^I"]]]]]],"^7","~$naga.engine/extract-dirty-pattern","~:variadic",false,"^T","resources/public/cljs/out/naga/engine.cljc","^X",30,"~:method-params",["^12",[["~$G__36294"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^V",1,"^1;",["^12",["^18",["^12",[[["~$p","^19"],"~:-","^I"]]]]],"^U",23,"^W",23,"~:max-fixed-arity",1,"~:fn-var",true,"^17",["^12",["^18",["^12",[[["~$p","^19"]]]]]],"^1:","Inputs: [[p status-atom] :- StatusMapEntry]\n  Returns: (s/maybe ss/EPVPattern)\n\n  Takes a key and value pair (from a status map) and determines if\n  the value (a ConstraintData) is marked dirty.  If it is dirty, then return\n  the key (an EPVPattern)."],"~$resolve-count",["^ ","^11",["^12",["^13","~$output-schema36317",["~$input-schema36318"]]],"^16",null,"^Y",["^ ","^17",["^12",["^18",["^12",[["~$storage","~$status","~$p"]]]]],"^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",32,"^V",9,"^W",32,"^X",22,"^11",["^12",["^13","^1E",["^1F"]]],"^1:","Inputs: [storage :- StorageType status :- StatusMap p :- ss/EPVPattern]\n  Returns: (s/maybe ss/EPVPattern)\n\n  Resolve a pattern against storage, and set the :resolution meta\n  data if the result is different from the last resolution.  Requires\n  a status map in order to lookup the last-count.","^1;",["^12",["^18",["^12",[["^1G","~:-","^H","^1H","~:-","^K","~$p","~:-","~$ss/EPVPattern"]]]]]],"^7","~$naga.engine/resolve-count","^1=",false,"^T","resources/public/cljs/out/naga/engine.cljc","^X",22,"^1>",["^12",[["~$G__36321","~$G__36322","~$G__36323"]]],"^1@",null,"^1A",["^12",[null,null]],"^V",1,"^1;",["^12",["^18",["^12",[["^1G","~:-","^H","^1H","~:-","^K","~$p","~:-","^1I"]]]]],"^U",32,"^W",32,"^1B",3,"^1C",true,"^17",["^12",["^18",["^12",[["^1G","^1H","~$p"]]]]],"^1:","Inputs: [storage :- StorageType status :- StatusMap p :- ss/EPVPattern]\n  Returns: (s/maybe ss/EPVPattern)\n\n  Resolve a pattern against storage, and set the :resolution meta\n  data if the result is different from the last resolution.  Requires\n  a status map in order to lookup the last-count."],"~$mark-rule-cleaned-with-latest-count!",["^ ","^11",["^12",["^13","~$output-schema36335",["~$input-schema36336"]]],"^16",null,"^Y",["^ ","^17",["^12",["^18",["^12",[["~$dirty-patterns","~$counted-set","^1H"]]]]],"^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",45,"^V",9,"^W",45,"^X",45,"^11",["^12",["^13","^1O",["^1P"]]],"^1:","Inputs: [dirty-patterns :- [ss/EPVPattern] counted-set :- #:ss{EPVPattern ss/EPVPattern} status :- StatusMap]\n\n  Reset the pattern status, making it clean.  Uses meta from\n   resolve-count (above). Result should be ignored.","^1;",["^12",["^18",["^12",[["^1Q","~:-",["^1I"],"^1R","~:-",["^ ","^1I","^1I"],"^1H","~:-","^K"]]]]]],"^7","~$naga.engine/mark-rule-cleaned-with-latest-count!","^1=",false,"^T","resources/public/cljs/out/naga/engine.cljc","^X",45,"^1>",["^12",[["~$G__36339","~$G__36340","~$G__36341"]]],"^1@",null,"^1A",["^12",[null,null]],"^V",1,"^1;",["^12",["^18",["^12",[["^1Q","~:-",["^1I"],"^1R","~:-",["^ ","^1I","^1I"],"^1H","~:-","^K"]]]]],"^U",45,"^W",45,"^1B",3,"^1C",true,"^17",["^12",["^18",["^12",[["^1Q","^1R","^1H"]]]]],"^1:","Inputs: [dirty-patterns :- [ss/EPVPattern] counted-set :- #:ss{EPVPattern ss/EPVPattern} status :- StatusMap]\n\n  Reset the pattern status, making it clean.  Uses meta from\n   resolve-count (above). Result should be ignored."],"~$schedule-downstream-queue",["^ ","^11",["^12",["^13","~$output-schema36381",["~$input-schema36382"]]],"^16",null,"^Y",["^ ","^17",["^12",["^18",["^12",[["~$rules","~$remaining-queue","~$downstream"]]]]],"^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",60,"^V",9,"^W",60,"^X",34,"^11",["^12",["^13","^1X",["^1Y"]]],"^1:","Inputs: [rules :- #:s{Str DynamicRule} remaining-queue :- PQueueType downstream :- [RulePatternPair]]\n\n  Adds all downstream rules to the queue.\n   The queue will adjust order according to salience, if necessary.\n   Also marks relevant patterns in the downstream rule bodies as dirty.","^1;",["^12",["^18",["^12",[["^1Z","~:-",["^ ","~$s/Str","^L"],"^1[","~:-","^O","^20","~:-",["^M"]]]]]]],"^7","~$naga.engine/schedule-downstream-queue","^1=",false,"^T","resources/public/cljs/out/naga/engine.cljc","^X",34,"^1>",["^12",[["~$G__36385","~$G__36386","~$G__36387"]]],"^1@",null,"^1A",["^12",[null,null]],"^V",1,"^1;",["^12",["^18",["^12",[["^1Z","~:-",["^ ","^21","^L"],"^1[","~:-","^O","^20","~:-",["^M"]]]]]],"^U",60,"^W",60,"^1B",3,"^1C",true,"^17",["^12",["^18",["^12",[["^1Z","^1[","^20"]]]]],"^1:","Inputs: [rules :- #:s{Str DynamicRule} remaining-queue :- PQueueType downstream :- [RulePatternPair]]\n\n  Adds all downstream rules to the queue.\n   The queue will adjust order according to salience, if necessary.\n   Also marks relevant patterns in the downstream rule bodies as dirty."],"~$execute",["^ ","^11",["^12",["^13","~$output-schema36406",["~$input-schema36407"]]],"^16",null,"^Y",["^ ","^17",["^12",["^18",["^12",[["^1Z","~$db-store"]]]]],"^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",80,"^V",9,"^W",80,"^X",16,"^11",["^12",["^13","^27",["^28"]]],"^1:","Inputs: [rules :- #:s{Str DynamicRule} db-store :- StorageType]\n  Returns: [(s/one StorageType \"Final value of storage\") (s/one #:s{Str s/Num} \"Map of rule name to execution count\")]\n\n  Executes a program. Data is retrieved from and inserted into db-store.","^1;",["^12",["^18",["^12",[["^1Z","~:-",["^ ","^21","^L"],"^29","~:-","^H"]]]]]],"^7","~$naga.engine/execute","^1=",false,"^T","resources/public/cljs/out/naga/engine.cljc","^X",16,"^1>",["^12",[["~$G__36410","~$G__36411"]]],"^1@",null,"^1A",["^12",[null,null]],"^V",1,"^1;",["^12",["^18",["^12",[["^1Z","~:-",["^ ","^21","^L"],"^29","~:-","^H"]]]]],"^U",80,"^W",80,"^1B",2,"^1C",true,"^17",["^12",["^18",["^12",[["^1Z","^29"]]]]],"^1:","Inputs: [rules :- #:s{Str DynamicRule} db-store :- StorageType]\n  Returns: [(s/one StorageType \"Final value of storage\") (s/one #:s{Str s/Num} \"Map of rule name to execution count\")]\n\n  Executes a program. Data is retrieved from and inserted into db-store."],"~$initialize-rules",["^ ","^11",["^12",["^13","~$output-schema36434",["~$input-schema36435"]]],"^16",null,"^Y",["^ ","^17",["^12",["^18",["^12",[["^1Z"]]]]],"^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",144,"^V",9,"^W",144,"^X",25,"^11",["^12",["^13","^2>",["^2?"]]],"^1:","Inputs: [rules :- #:s{Str Rule}]\n  Returns: #:s{Str DynamicRule}\n\n  Takes rules with calculated dependencies, and initializes them","^1;",["^12",["^18",["^12",[["^1Z","~:-",["^ ","^21","^J"]]]]]]],"^7","~$naga.engine/initialize-rules","^1=",false,"^T","resources/public/cljs/out/naga/engine.cljc","^X",25,"^1>",["^12",[["~$G__36438"]]],"^1@",null,"^1A",["^12",[null,null]],"^V",1,"^1;",["^12",["^18",["^12",[["^1Z","~:-",["^ ","^21","^J"]]]]]],"^U",144,"^W",144,"^1B",1,"^1C",true,"^17",["^12",["^18",["^12",[["^1Z"]]]]],"^1:","Inputs: [rules :- #:s{Str Rule}]\n  Returns: #:s{Str DynamicRule}\n\n  Takes rules with calculated dependencies, and initializes them"],"~$run",["^ ","^11",["^12",["^13","~$output-schema36460",["~$input-schema36461"]]],"^16",null,"^Y",["^ ","^17",["^12",["^18",["^12",[["~$config",["^ ","~:keys",["^1Z","~$axioms"]]]]]]],"^T","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/naga/engine.cljc","^U",158,"^V",9,"^W",158,"^X",12,"^11",["^12",["^13","^2C",["^2D"]]],"^1:","Inputs: [config :- #:s{Keyword s/Any} {:keys [rules axioms]} :- Program]\n  Returns: [(s/one StorageType \"Resulting data store\") (s/one #:s{Str s/Num} \"Execution stats\") (s/one (s/maybe #:s{Str s/Num}) \"Execution stats\")]\n\n  Runs a program against a given configuration","^1;",["^12",["^18",["^12",[["^2E","~:-",["^ ","~$s/Keyword","~$s/Any"],["^ ","^2F",["^1Z","^2G"]],"~:-","^P"]]]]]],"^7","~$naga.engine/run","^1=",false,"^T","resources/public/cljs/out/naga/engine.cljc","^X",12,"^1>",["^12",[["~$G__36464","~$G__36465"]]],"^1@",null,"^1A",["^12",[null,null]],"^V",1,"^1;",["^12",["^18",["^12",[["^2E","~:-",["^ ","^2H","^2I"],["^ ","^2F",["^1Z","^2G"]],"~:-","^P"]]]]],"^U",158,"^W",158,"^1B",2,"^1C",true,"^17",["^12",["^18",["^12",[["^2E",["^ ","^2F",["^1Z","^2G"]]]]]]],"^1:","Inputs: [config :- #:s{Keyword s/Any} {:keys [rules axioms]} :- Program]\n  Returns: [(s/one StorageType \"Resulting data store\") (s/one #:s{Str s/Num} \"Execution stats\") (s/one (s/maybe #:s{Str s/Num}) \"Execution stats\")]\n\n  Runs a program against a given configuration"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$s","^;","^;","^;"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^1D","^2H","^1[","~$schema.core/Any","^11","~:dirty","~:downstream","^21","^1W","~:schema.core/error","~$p","^1I","~:last-count","^2=","~$arg1","^H","~:salience","^7","^20","^1Q","~:value","^2B","~$s/one","^J","~:execution-count","^K","~:type","~:output","~:rules","^2E","~:axioms","^L","^M","~:head","^26","~:status","^1Z","~:count","^10","~:error","~$s/maybe","^1R","~:input","^O","^1N","~$arg0","^1H","~:body","^1:","^1G","^29","^2I","~$s/Num"]],"~:order",["^39","^38","^10","^11","^1:","^37","^1I","^2[","^2X","^36","^2T","^2R","^30","^1G","^H","^1H","^K","~$p","^1D","^2U","^35","^1Q","^1R","^1N","^2Q","^1Z","^21","^L","^1[","^O","^20","^M","^1W","^34","^29","^26","^2Y","^3;","^2W","^7","^3:","^33","^2S","^2Z","^J","^2=","^2E","^2H","^2I","^2V","^2B","^31","^32"]],"^1:","Functions to run rules until completion."]