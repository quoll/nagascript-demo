["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$schema.spec.core","~:imports",null,"~:requires",["^ ","~$utils","~$schema.utils","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$CoreSpec",["^ ","~:meta",["^ ","~:file","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","~:line",12,"~:column",14,"~:end-line",12,"~:end-column",22,"~:doc","Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.","~:protocol-symbol",true,"~:jsdoc",["~#list",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$subschemas",[["~$this"]],"~$checker",[["^N","~$params"]]]]],"^H",true,"^7","~$schema.spec.core/CoreSpec","^B","resources/public/cljs/out/schema/spec/core.cljs","^F",22,"^D",1,"^C",12,"^K",["^ ","^L",["^ ","^M",[["^N"]],"^O",[["^N","^P"]]]],"~:info",null,"^E",12,"~:tag","~$any","~:impls",["^6",[]],"^G","Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.","^I",["^J",["@interface"]]],"^M",["^ ","~:protocol-inline",null,"^A",["^ ","^B","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","^C",16,"^D",4,"^E",16,"^F",14,"~:protocol","^Q","^G","List all subschemas","~:arglists",["^J",["~$quote",["^J",[["^N"]]]]]],"^W","^Q","^7","~$schema.spec.core/subschemas","~:variadic",false,"^B","resources/public/cljs/out/schema/spec/core.cljs","^F",14,"~:method-params",["^J",[["^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^D",1,"^C",12,"^E",16,"~:max-fixed-arity",1,"~:fn-var",true,"^X",["^J",["^Y",["^J",[["^N"]]]]],"^G","List all subschemas"],"^O",["^ ","^V",null,"^A",["^ ","^B","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","^C",18,"^D",4,"^E",18,"^F",11,"^W","^Q","^G","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.","^X",["^J",["^Y",["^J",[["^N","^P"]]]]]],"^W","^Q","^7","~$schema.spec.core/checker","^[",false,"^B","resources/public/cljs/out/schema/spec/core.cljs","^F",11,"^10",["^J",[["^N","^P"]]],"^11",null,"^12",["^J",[null,null]],"^D",1,"^C",12,"^E",18,"^13",2,"^14",true,"^X",["^J",["^Y",["^J",[["^N","^P"]]]]],"^G","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas."],"~$+no-precondition+",["^ ","^V",null,"^A",["^ ","^B","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","^C",43,"^D",6,"^E",43,"^F",23],"^7","~$schema.spec.core/+no-precondition+","^[",false,"^B","resources/public/cljs/out/schema/spec/core.cljs","^F",23,"^10",["^J",[["~$_"]]],"^11",null,"^12",["^J",[]],"^D",1,"^C",43,"^E",43,"^13",1,"^14",true,"^X",null],"~$precondition",["^ ","^V",null,"^A",["^ ","^B","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","^C",45,"^D",7,"^E",45,"^F",19,"^X",["^J",["^Y",["^J",[["~$s","~$p","~$err-f"]]]]],"^G","Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."],"^7","~$schema.spec.core/precondition","^[",false,"^B","resources/public/cljs/out/schema/spec/core.cljs","^F",19,"^10",["^J",[["~$s","~$p","^19"]]],"^11",null,"^12",["^J",[null,null]],"^D",1,"^C",45,"^E",45,"^13",3,"^14",true,"^X",["^J",["^Y",["^J",[["~$s","~$p","^19"]]]]],"^G","Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."],"~$run-checker",["^ ","^V",null,"^A",["^ ","^B","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","^C",65,"^D",7,"^E",65,"^F",18,"^X",["^J",["^Y",["^J",[["~$f","~$return-walked?","~$s"]]]]],"^G","A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."],"^7","~$schema.spec.core/run-checker","^[",false,"^B","resources/public/cljs/out/schema/spec/core.cljs","^F",18,"^10",["^J",[["~$f","^1<","~$s"]]],"^11",null,"^12",["^J",[null,null]],"^D",1,"^C",65,"^E",65,"^13",3,"^14",true,"^X",["^J",["^Y",["^J",[["~$f","^1<","~$s"]]]]],"^G","A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."],"~$with-cache",["^ ","^V",null,"^A",["^ ","^B","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","^C",75,"^D",7,"^E",75,"^F",17,"^X",["^J",["^Y",["^J",[["~$cache","~$cache-key","~$wrap-recursive-delay","~$result-fn"]]]]]],"^7","~$schema.spec.core/with-cache","^[",false,"^B","resources/public/cljs/out/schema/spec/core.cljs","^F",17,"^10",["^J",[["^1?","^1@","^1A","^1B"]]],"^11",null,"^12",["^J",[null,null]],"^D",1,"^C",75,"^E",75,"^13",4,"^14",true,"^X",["^J",["^Y",["^J",[["^1?","^1@","^1A","^1B"]]]]]],"~$sub-checker",["^ ","^V",null,"^A",["^ ","^B","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/core.cljs","^C",85,"^D",7,"^E",85,"^F",18,"^X",["^J",["^Y",["^J",[[["^ ","~:keys",["~$schema","~$error-wrap"]],["^ ","^1E",["~$subschema-checker","^1?"],"~:as","^P"]]]]]],"^G","Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."],"^7","~$schema.spec.core/sub-checker","^[",false,"^B","resources/public/cljs/out/schema/spec/core.cljs","^F",18,"^10",["^J",[["~$p__27902","~$p__27903"]]],"^11",null,"^12",["^J",[null,null]],"^D",1,"^C",85,"^E",85,"^13",2,"^14",true,"^X",["^J",["^Y",["^J",[[["^ ","^1E",["^1F","^1G"]],["^ ","^1E",["^1H","^1?"],"^1I","^P"]]]]]],"^G","Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$macros","~$schema.macros","^1P","^1P","^;","^<","^<","^<"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:schema","~:schema.spec.core/in-progress","~:return-walked?","~$throws?","~:else","~:subschema-checker","~:cache","~$not","~:error-wrap"]],"~:order",["^1V","^1W","^1Z","^1X","^1U","^1Y","^1T","^1S","^1["]],"^G","Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure."]