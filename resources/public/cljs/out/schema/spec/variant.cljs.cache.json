["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "],"~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$schema.spec.variant","~:imports",null,"~:requires",["^ ","~$utils","~$schema.utils","^=","^=","~$spec","~$schema.spec.core","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$option-step",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/variant.cljs","~:line",12,"~:column",8,"~:end-line",12,"~:end-column",19,"~:private",true,"~:arglists",["~#list",["~$quote",["^M",[["~$o","~$params","~$else"]]]]]],"^K",true,"^8","~$schema.spec.variant/option-step","~:variadic",false,"^F","resources/public/cljs/out/schema/spec/variant.cljs","^J",19,"~:method-params",["^M",[["~$o","^O","^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^H",1,"^G",12,"^I",12,"~:max-fixed-arity",3,"~:fn-var",true,"^L",["^M",["^N",["^M",[["~$o","^O","^P"]]]]]],"~$VariantSpec",["^ ","~:num-fields",4,"~:protocols",["^7",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$schema.spec.core/CoreSpec","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^8","~$schema.spec.variant/VariantSpec","^F","resources/public/cljs/out/schema/spec/variant.cljs","^J",23,"~:type",true,"^H",12,"~:internal-ctor",true,"^G",41,"~:record",true,"^I",41,"~:skip-protocol-flag",["^7",["^[","^10","^11","^12","^13","^15","^16","^17","^18","^19","^1:","^1;","^1<","^1="]]],"~$->VariantSpec",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/variant.cljs","^G",41,"^H",12,"^I",41,"^J",23,"^1@",true,"~:factory","~:positional","^L",["^M",["^N",["^M",[["~$pre","~$options","~$err-f","~$post"]]]]],"~:doc","Positional factory function for schema.spec.variant/VariantSpec."],"^8","~$schema.spec.variant/->VariantSpec","^R",false,"^F","resources/public/cljs/out/schema/spec/variant.cljs","^J",23,"^S",["^M",[["^1F","^1G","^1H","^1I"]]],"^T",null,"^U",["^M",[null,null]],"^H",1,"^1@",true,"^1D","^1E","^G",41,"^I",41,"^V",4,"^W",true,"^L",["^M",["^N",["^M",[["^1F","^1G","^1H","^1I"]]]]],"^1J","Positional factory function for schema.spec.variant/VariantSpec."],"~$map->VariantSpec",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/variant.cljs","^G",41,"^H",12,"^I",41,"^J",23,"^1@",true,"^1D","~:map","^L",["^M",["^N",["^M",[["~$G__27969"]]]]],"^1J","Factory function for schema.spec.variant/VariantSpec, taking a map of keywords to field values."],"^8","~$schema.spec.variant/map->VariantSpec","^R",false,"^F","resources/public/cljs/out/schema/spec/variant.cljs","^J",23,"^S",["^M",[["^1N"]]],"^T",null,"^U",["^M",[null,null]],"^H",1,"^1@",true,"^1D","^1M","^G",41,"^I",41,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^1N"]]]]],"^1J","Factory function for schema.spec.variant/VariantSpec, taking a map of keywords to field values."],"~$variant-spec",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/play/cljs/nagascript-demo/resources/public/cljs/out/schema/spec/variant.cljs","^G",61,"^H",7,"^I",61,"^J",19,"^L",["^M",["^N",["^M",[["^1F","^1G"],["^1F","^1G","^1H"],["^1F","^1G","^1H","^1I"]]]]],"^1J","A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard).","~:top-fn",["^ ","^R",false,"^V",4,"^S",["^M",[["^1F","^1G"],["^1F","^1G","^1H"],["^1F","^1G","^1H","^1I"]]],"^L",["^M",[["^1F","^1G"],["^1F","^1G","^1H"],["^1F","^1G","^1H","^1I"]]],"^U",["^M",[null,null,null]]]],"^8","~$schema.spec.variant/variant-spec","^R",false,"^F","resources/public/cljs/out/schema/spec/variant.cljs","^J",19,"^1Q",["^ ","^R",false,"^V",4,"^S",["^M",[["^1F","^1G"],["^1F","^1G","^1H"],["^1F","^1G","^1H","^1I"]]],"^L",["^M",[["^1F","^1G"],["^1F","^1G","^1H"],["^1F","^1G","^1H","^1I"]]],"^U",["^M",[null,null,null]]],"^S",["^M",[["^1F","^1G"],["^1F","^1G","^1H"],["^1F","^1G","^1H","^1I"]]],"^T",null,"^U",["^M",[null,null,null]],"^H",1,"^G",61,"^I",61,"^V",4,"^W",true,"^L",["^M",[["^1F","^1G"],["^1F","^1G","^1H"],["^1F","^1G","^1H","^1I"]]],"^1J","A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard)."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$macros","~$schema.macros","^1V","^1V","^<","^=","^=","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["^1G","~:schema","~:return-walked?","~$throws?","~:pre","~:else","~:wrap-error","^1F","~:err-f","^1H","~:schema.spec.variant/exception","~:post","~:options","~:guard","^1I"]],"~:order",["^27","^24","^21","^1Y","^1[","^22","^1Z","^20","^26","^23","^25","^1F","^1G","^1H","^1I"]],"^1J",null]